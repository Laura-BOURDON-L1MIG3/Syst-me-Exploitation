class Task:
    name = ""
    reads = []
    writes = []
    run = None

class TaskSystem:
    def __init__(self, tasks=[], previous={}):
        self.listTask = tasks
        self.dependencies = previous
        self.VerifNomDeTache() # ajout d'une initialisation pour vérifier les noms de tâches

    def VerifNomDeTache(self):
        task_names = [task.name for task in self.listTask] # task_names est une liste de nom de tous les tâches du système
        if len(task_names) != len(set(task_names)): # comparaison de la longueur de la liste task_names avec la longueur de la liste task_names (set() n'accepte pas les doublons)
            print("Les noms des tâches ne peuvent pas être dupliqués.")

X = None
Y = None
Z = None

def runT1():
    global X
    X = 1

def runT2():
    global Y
    Y = 2

def runT3():
    global N
    N = 5

def runTsomme():
    global X, Y, Z
    Z = X + Y

t1 = Task()
t1.name = "T1"
t1.writes = ["X"]
t1.run = runT1

t2 = Task()
t2.name = "T2"
t2.writes = ["Y"]
t2.run = runT2

t3 = Task()
t3.name = "T3"
t3.writes = ["Y"]
t3.run = runT3

tSomme = Task()
tSomme.name = "somme"
tSomme.reads = ["X","Y"]
tSomme.writes = ["Z"]
tSomme.run = runTsomme

TaskSystem([t1,t1,t3,tSomme], {"T1": [], "T2": [], "T3": [], "somme":["T1","T2"]})