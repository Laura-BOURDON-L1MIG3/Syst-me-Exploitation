from maxpar import *

def main():
    # Créer les tâches
    t1 = Task()
    t1.name = "T1"
    t1.writes = ["X"]
    t1.run = runT1

    t2 = Task()
    t2.name = "T2"
    t2.writes = ["Y"]
    t2.run = runT2

    t3 = Task()
    t3.name = "T3"
    t3.writes = ["N"]
    t3.run = runT3

    tSomme = Task()
    tSomme.name = "somme"
    tSomme.reads = ["X","Y"]
    tSomme.writes = ["Z"]
    tSomme.run = runTsomme

    # Créer les systèmes de tâches
    s1 = TaskSystem([t1,t2,t3,tSomme], {"T1": [], "T2": ["T3"], "T3": [], "somme":["T1","T2"]})
    
    # Dépendances de tâches
    print(s1.getDependencies(t1))

    # Exécuter les tâches séquentiellement
    print("Exécution séquentielle des tâches:")
    s1.runSeq()

    # Exécuter les tâches en parallèle
    print("\n")
    s1.run()
    
    # Coût de run() et runSeq()
    s1.parCost()
    
    ######################
    # Vérifier les entrées du sytème de tâches :
    print("Vérification des entrées du système de tâches s1:")
    s1.rightEntry()
    """print("Vérification des entrées du système de tâches s2:")
    s2.rightEntry()
    print("Vérification des entrées du système de tâches s3:")
    s3.rightEntry()
    print("Vérification des entrées du système de tâches s4:")
    s4.rightEntry()"""
    
    ###################### 
    # Graphe du sytème :
    s1.draw()
    """s2.draw()
    s3.draw()
    s4.draw()"""
    
    # Système déterministe ou non :
    s1.detTestRnd()
    
if __name__ == "__main__":
    main()
