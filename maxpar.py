class Task:
    name = ""
    reads = []
    writes = []
    run = None

X = None
Y = None
Z = None

def runT1():
    global X
    X = 1

def runT2():
    global Y
    Y = 2

def runTsomme():
    global X, Y, Z
    Z = X + Y

t1 = Task()
t1.name = "T1"
t1.writes = ["X"]
t1.run = runT1

t2 = Task()
t2.name = "T2"
t2.writes = ["Y"]
t2.run = runT2

tSomme = Task()
tSomme.name = "somme"
tSomme.reads = ["X", "Y"]
tSomme.writes = ["Z"]
tSomme.run = runTsomme

t1.run()
t2.run()
tSomme.run()
print(X)
print(Y)
print(Z)

class TaskSystem:
    """
    listTask = []  #objet de la classe Task
    previousTask = {}   #les clés sont les noms des tâches et les valeurs sont les listes des noms des tâches qui doivent être exécutées avant la tâche correspondante
    on déclare directement dans def __init__
    """ 

    #il faut avoir un __init__() Function
    def __init__(self,tasks=[],previous={}):
        self.listTask = tasks
        self.previousTask = previous

    #initialiser une liste dependencies pour retourner les tâches qui doivent s’exécuter avant la tâche nomTache
    #vérifiez les clés (noms de tâches) et les valeurs (listes de dépendances) du dictionnaire par méthode items()
    def getDependencies(self, nomTache):
        dependencies = []
        for taskName, precedenceList in self.previousTask.items():
            if nomTache == taskName:
                dependencies.extend(precedenceList)
        return dependencies

    """
    Objectif: Effectuer les tâches séquentielle tout en utilisant condition de Bernstein
    condition de Bernstein: Deux tâches ne peuvent pas être exécutées en parallèle si l'une d'elles écrit une donnée que l'autre lit
    idée: vérifier les dépendances, si vrai, on execute, sinon, on n'execute pas les tâches
    """
    def runSeq(self):
        executedTask = set()
        while len(executedTask) < len(self.listTask):
            for task in self.listTask:
                if task.name not in executedTask:
                    dependencies = self.getDependencies(task.name)
                    depSatis = True
                    if dependencies:
                        for dep in dependencies:
                            if dep not in executedTask:
                                depSatis = False
                                break
                    if depSatis:
                        task.run()
                        print(f"La tâche '{task.name}' est exécutée")
                        executedTask.add(task.name)
                    else:
                        print(f"La tâche '{task.name}' ne peut pas être exécutée car les dépendances ne sont pas satisfaites.")
                        continue  # Passe à la prochaine itération de la boucle for

    """
    def run():
        print("Lancement fonction run")
        # si une tache a pas besoin d'une autre avant alors la faire => les faire toutes les tâches précédentes
        # previousTask = 0 
        # for task in listTask :
            # if getDependencies(nomTache) != 0 alors on doit executer les autres taches avant
            # est ce qu'on peut savoir cmb de temps dure une tache ? -> + courte en first ?
            # supprimer la tache de la liste pr ne pas pouvoir la relancer
            # calculer cmb max en mm temps et duree (comparer les grp de taches a executer)
    """
    def run(self):
        executedTask = set()
        while self.listTask:
            tasksToRemove = set()
            for task in self.listTask:
                dependencies = self.getDependencies(task.name)
                if all(dep in executedTask for dep in dependencies):
                    task.run()
                    executedTask.add(task.name)
                    tasksToRemove.add(task)
            if not tasksToRemove:
                print("Impossible de trouver des tâches pouvant être exécutées simultanément.")
                break
            self.listTask = [task for task in self.listTask if task not in tasksToRemove]


s1 = TaskSystem([t1,t2,tSomme], {"T1": [], "T2": ["T1"], "somme":["T1","T2"]})

print(s1.getDependencies("somme"))
s1.runSeq()