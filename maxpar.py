import threading

class Task:
    name = ""
    reads = []
    writes = []
    run = None

X = None
Y = None
Z = None

def runT1():
    global X
    X = 1

def runT2():
    global Y
    Y = 2

def runTsomme():
    global X, Y, Z
    Z = X + Y

t1 = Task()
t1.name = "T1"
t1.writes = ["X"]
t1.run = runT1

t2 = Task()
t2.name = "T2"
t2.writes = ["Y"]
t2.run = runT2

tSomme = Task()
tSomme.name = "somme"
tSomme.reads = ["X", "Y"]
tSomme.writes = ["Z"]
tSomme.run = runTsomme

t1.run()
t2.run()
tSomme.run()
print(X)
print(Y)
print(Z)

class TaskSystem:
    def __init__(self,tasks=[],previous={}):
        self.listTask = tasks
        self.previousTask = previous

    def getDependencies(self, nomTache):
        dependencies = []
        for taskName, precedenceList in self.previousTask.items():
            if nomTache == taskName:
                dependencies.extend(precedenceList)
        return dependencies
    
    def runSeq(self):
        executedTask = []
        while len(executedTask) < len(self.listTask):
                for task in self.listTask:
                    if task.name not in executedTask:
                        dependencies = self.getDependencies(task.name)
                        hasDep = True
                        if dependencies:
                            for dep in dependencies:
                                if dep not in executedTask:
                                    hasDep = False
                                    break
                        if hasDep:
                            task.run()
                            print(f"La tâche '{task.name}' est exécutée")
                            executedTask.append(task.name)
                        else:
                            print(f"La tâche '{task.name}' ne peut pas être exécutée car les dépendances ne sont pas satisfaites.")
                            continue  # Passe à la prochaine itération de la boucle for
    
    def run(self):
        while self.listTask:
            tasksToRemove = set()
            tasksToExecute = set()
            for task1 in self.listTask:
                toExecute = True
                for task2 in self.listTask:
                    if task1 != task2:
                        # Utilisation de la condition de Bernstein
                        if any(r in task2.writes for r in task1.reads) or any(r in task1.writes for r in task2.reads):
                            toExecute = False
                            break
                if toExecute:
                    tasksToExecute.add(task1)
                else:
                    tasksToRemove.add(task1)
            if tasksToExecute:
                for task in tasksToExecute:
                    task.run()
                    print(f"La tâche '{task.name}' est exécutée")
            else:
                print("Impossible de trouver des tâches pouvant être exécutées simultanément.")
                break
            for task in tasksToRemove:
                self.listTask.remove(task)

s1 = TaskSystem([t1,t2,tSomme], {"T1": [], "T2": [], "somme":["T1","T2"]})

print(s1.getDependencies("somme"))
s1.run()