class Task:
    name = ""
    reads = []
    writes = []
    run = None

X = None
Y = None
Z = None

def runT1():
    global X
    X = 1

def runT2():
    global Y
    Y = 2

def runTsomme():
    global X, Y, Z
    Z = X + Y

t1 = Task()
t1.name = "T1"
t1.writes = ["X"]
t1.run = runT1

t2 = Task()
t2.name = "T2"
t2.writes = ["Y"]
t2.run = runT2

tSomme = Task()
tSomme.name = "somme"
tSomme.reads = ["X", "Y"]
tSomme.writes = ["Z"]
tSomme.run = runTsomme

t1.run()
t2.run()
tSomme.run()
print(X)
print(Y)
print(Z)

class TaskSystem:
    """
    listTask = []  #objet de la classe Task
    previousTask = {}   #les tâches précédentes
    on déclare directement dans def __init__
    """ 

    #il faut avoir un __init__() Function
    def __init__(self,tasks=[],previous={}):
        self.listTask = tasks
        self.previousTask = previous

    # def getDepencies(nomTache): 

    #Objectif: Effectuer les tâches séquentielle en respectant l'ordre relation précédence
    #getDepencies: renvoyer les noms des tâches avant nomTache
    #idée: vérifier les dépendances, si vrai, on break, sinon, on exécute les tâches
    def runSeq(self):
        for task in self.listTask:
            dependencies = self.getDependencies(task.name)
            

    def run():
        print("Lancement fonction run")
        # si une tache a pas besoin d'une autre avant alors la faire => les faire toutes les tâches précédentes
        # previousTask = 0 
        # for task in listTask :
            # if getDependencies(nomTache) != 0 alors on doit executer les autres taches avant
            # est ce qu'on peut savoir cmb de temps dure une tache ? -> + courte en first ?
            # supprimer la tache de la liste pr ne pas pouvoir la relancer
            # calculer cmb max en mm temps et duree (comparer les grp de taches a executer)
 


s1 = TaskSystem([t1,t2,tSomme], {"T1": [], "T2": ["T1"], "somme":["T1","T2"]})

