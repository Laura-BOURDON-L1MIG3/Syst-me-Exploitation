def detTestRnd(self):
        """
        Méthode pour tester le déterminisme en exécutant deux fois le système avec les mêmes valeurs aléatoires.
        """
        if not self.run():
            print("Le système est déterministe.")
            return False
        else:
            # Obtenir les noms des variables des tâches exécutées en parallèle
            global_vars_names = set()

            for task in self.listTask:
                global_vars_names.update(task.writes)

            global_vars_names = list(global_vars_names)

            # Générer des valeurs aléatoires pour les variables globales
            random_values = [random.randint(0, 10) for _ in range(len(global_vars_names))]

            # Réinitialiser les variables globales avec les valeurs aléatoires générées
            for var_name, var_value in zip(global_vars_names, random_values):
                globals()[var_name] = var_value

            # Exécuter le système de tâches pour la première fois
            print("Première exécution du système :")
            self.run()
            print("Résultat de la première exécution :", end=" ")
            for var_name, var_value in zip(global_vars_names, random_values):
                print(f"{var_name} =", var_value, ",", end=" ")
            result_1 = random_values[:]
            # Réinitialiser les variables globales avec les mêmes valeurs aléatoires pour la deuxième exécution
            for var_name, var_value in zip(global_vars_names, random_values):
                globals()[var_name] = var_value
            executed_tasks = [task.name for task in self.listTask if task.executed_parallel]
            for task in self.listTask:
                if task.name not in executed_tasks:
                    task.run()
                    for var_name in task.writes:
                        print(f"{var_name} =", globals()[var_name])
            print("Fin de la première exécution\n")

            # Exécuter le système de tâches pour la deuxième fois
            print("Deuxième exécution du système :")
            self.run()  # Pas besoin d'appeler self.run() ici
            print("Résultat de la deuxième exécution :", end=" ")
            for var_name, var_value in zip(global_vars_names, random_values):
                print(f"{var_name} =", var_value, ",", end=" ")
            result_2 = random_values[:]
            # Réinitialiser les variables globales avec les mêmes valeurs aléatoires pour la deuxième exécution
            for var_name, var_value in zip(global_vars_names, random_values):
                globals()[var_name] = var_value
            executed_tasks = [task.name for task in self.listTask if task.executed_parallel]
            for task in self.listTask:
                if task.name not in executed_tasks:
                    task.run()
                    for var_name in task.writes:
                        print(f"{var_name} =", globals()[var_name])
            print("Fin de la deuxième exécution")

            # Vérifier si les résultats de la première et de la deuxième exécution sont les mêmes
            if result_1 == result_2:
                print("Le système est déterministe.")
            else:
                print("Le système n'est pas déterministe.")